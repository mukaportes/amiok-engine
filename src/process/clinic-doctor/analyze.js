const { getAnalysisFile } = require('../../modules/doctor');
const PROCESS_ENUM = require('../../enums/process');

const setItemResults = (results, resultItem) => {
  results.delay += resultItem.delay;
  results.cpu += resultItem.cpu;
  results.memory.rss += resultItem.memory.rss;
  results.memory.heapTotal += resultItem.memory.heapTotal;
  results.memory.heapUsed += resultItem.memory.heapUsed;
  results.memory.external += resultItem.memory.external;
  results.memory.arrayBuffers += resultItem.memory.arrayBuffers;
  results.handles += resultItem.handles;
  results.itemCount += 1;
};

const toMB = (value) => Number(value) / 1024 / 1024;

const formatResults = (results) => ({
  delay: (results.delay / results.itemCount),
  cpu: (results.cpu / results.itemCount),
  memoryRss: (toMB(results.memory.rss / results.itemCount)),
  memoryHeapTotal: (toMB(results.memory.heapTotal / results.itemCount)),
  memoryHeapUsed: (toMB(results.memory.heapUsed / results.itemCount)),
  memoryExternal: (toMB(results.memory.external / results.itemCount)),
  memoryArrayBuffers: (toMB(results.memory.arrayBuffers / results.itemCount)),
  handles: (results.handles / results.itemCount),
});

module.exports = async ({ }, context) => {
  console.info(`Executing process ${PROCESS_ENUM.DOCTOR_ANALYZE}`);

  try {
    const { apiPid } = context[PROCESS_ENUM.INFO_API_PID];
    const { startTime, endTime } = context[PROCESS_ENUM.SCRIPT_EXECUTE];

    const results = await getAnalysisFile(null, apiPid);
    
    if (!results) throw 'Invalid analysis file generated by Clinic Doctor.';

    const parsedResults = JSON.parse(results);

    const groupedResults = parsedResults.reduce((acc, item) => {
      if (item.timestamp <= startTime) {
        setItemResults(acc.start, item);
      } else if (item.timestamp <= endTime) {
        setItemResults(acc.tests, item);
      } else {
        setItemResults(acc.end, item);
      }

      return acc;
    }, {
      start: {
        // timestamp: 1624820240692,
        delay: 0,
        cpu: 0,
        memory: {
          rss: 0,
          heapTotal: 0,
          heapUsed: 0,
          external: 0,
          arrayBuffers: 0
        },
        handles: 0,
        itemCount: 0,
      },
      tests: {
        delay: 0,
        cpu: 0,
        memory: {
          rss: 0,
          heapTotal: 0,
          heapUsed: 0,
          external: 0,
          arrayBuffers: 0
        },
        handles: 0,
        itemCount: 0,
      },
      end: {
        delay: 0,
        cpu: 0,
        memory: {
          rss: 0,
          heapTotal: 0,
          heapUsed: 0,
          external: 0,
          arrayBuffers: 0
        },
        handles: 0,
        itemCount: 0,
      },
    });
    console.log('groupedResults', groupedResults);

    const formattedResults = Object.keys(groupedResults).map(key => formatResults(groupedResults[key]));

    console.log('formattedResults', formattedResults);

    return { key: PROCESS_ENUM.DOCTOR_ANALYZE, results: formattedResults };
  } catch (error) {
    console.error(`Error executing ${PROCESS_ENUM.DOCTOR_ANALYZE} process`, error);

    throw error;
  }
};
